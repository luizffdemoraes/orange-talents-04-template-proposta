server.port = 8099

# database
spring.datasource.url=${DATABASE_URL:jdbc:mariadb://127.0.0.1:3308/propostas?createDatabaseIfNotExist=true}
spring.datasource.username=${DATABASE_USER:root}
spring.datasource.password=${DATABASE_PASSWORD:root}
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

# jpa
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImproveNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect

#https://medium.com/@gcbrandao/monitore-sua-api-com-spring-boot-admin-e-actuator-40e73a5e50b0
# puxa informacoes do projeto do pom.xml
info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

# Health Cehck - Spring Actuator
#management.endpoint.health.show-details = always 
management.health.probes.enabled = true;

# Metricas com Prometheus
#management.endpoints.web.exposure.include=info,health,prometheus
#management.endpoints.prometheus.enabled=true

# Health - Alef
#Traz mais detalhes do endpoint
endpoint.health.sensitive=false
management.endpoint.health.show-details = always 


# actuator endpoints
management.endpoints.web.exposure.include=health, info, prometheus, metrics
management.endpoints.web.exposure.exclude=env,beans
management.endpoint.health.show-details=ALWAYS
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:serviço de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento} 

# dominio da aplicação
analises.host=${ANALISES_URL:http://localhost:9999/api/solicitacao}
cartoes.host=${CARTOES_URL:http://localhost:8888/api/cartoes}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

#Jaeger 

#Para acessar o Jarger http://localhost:16686/search
# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

#Criptografia
criptografia.secret=${CRIPTOGRAFIA_SECRET:s)=gKTTVk^cHgI$PDZFA#iXLVlQO2g4hg}